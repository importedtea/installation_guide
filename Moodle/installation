#Moodle will be installed on RHEL Server 7.4
#Testing will be done on a CentOS 7 VM

# Note:
# This setup takes place with a minimal install of both CentOS and RHEL7
# This means configurations like network enabled on startup, or anything else network related must be manually configured.


Section 0: System Specs
===================================
          SYSTEM SPECS
===================================
# The installation is starting on a freshly setup VM on VirtualBox
# The system is setup with 2048 MB RAM (although 1024 will do fine for dev testing)

## Production
Red Hat Enterprise Linux Server 7.4 (Maipo)
Kernel 3.10.0-693.e17.x86_64 on an x86_64

## Testing
CentOS Linux (Core)
Kernel 3.10.0-862.9.1.el7.x86_64 on an x86_64

Section 1: Network Configuration
===================================
          NETWORK CONFIG
===================================
# The first thing we want to do on a fresh install of RHEL on a VM is check network connectivity.
# First ping Google's DNS to get an idea if you can reach the outside world.
ping 8.8.8.8

[a] If network is not active: (which it should not be on a minimal install, unless you flipped the switch on the anaconda installer)
# A script was made to auto populate a static network interface. In this case enp0s3.
# The script relies on a static path assigned by the administrator, the path is as follows.
# Change this to whatever suits your interface.
path=/etc/sysconfig/network-scripts/ifcfg-enp0s3

# Obviously in production we want to use a static IP and we want the network to boot on startup so we use the following:
sed -i "s/dhcp/none/" $path
sed -i "s/ONBOOT=no/ONBOOT=yes/" $path

# Next we want to set the static IP, subnet mask, gateway, and any DNS servers.
# The script prompts the user to enter IP addresses (be careful not to mess them up)
# It uses redirection to append these values to the file, and example of the script is the following:
read -rp "Enter a static IP" static
echo IPADDR=$static" >> $path

[b] If network is active: (i.e. you chose to enable it and potentially set static properties during the anaconda installer)
# Then good for you. Go to the next part.

Section 1.2 Setting Your Hostname
===================================
       HOSTNAME CONFIGURATION
===================================
# In the case of using Moodle in your organization, you will need to supply your computer with a hostname that is not localhost.
# Note: The hostname can be different than your fully qualitfied domain name, however,
          # it should probably just be the same to make life easier.

# First let's use a simple command to check what our hostname is:
# This will also give you some more useful information about your system, such as kernel, name, etc.
hostnamectl status

#Setting your hostname
hostnamectl set-hostname moodle.organization.org

# In the case of development, moodle.dev.org was chosen as the hostname (which means absolutely nothing for a non-production system)


Section 2: Update Your System
===================================
          UPDATE SYSTEM
===================================
# It is always a good idea to update your system on a fresh install.
# When using YUM to install/update your system it will try to look for repositories to pull packages.
# A repository is essentially, as the name suggests, a location to store files.
# These repositories can have files with extension .rpm, .txt, etc.
# A .rpm package will contain commands to build and compile code, once completed, it is pushed to a repo.
# You install a repo to your system, usually through editing /etc/yum.repos.d and then use yum to install whatever is contained.
# When you run yum update, it goes to that file and pulls any new repos; this is how companies push updates to packages.

# Run the following command to check for updates on the system
# Note, this will not actually update the system, it will just show you what is there in case you don't want to install something you don't want.
yum check-update

# Once you have verified that all the updates are "to your standards", run the following command
yum update

[a] Let's talk about firewalls briefly.
If you sit behind a firewall that is more secure than your average home security, then you might want to take a moment to troubleshoot some potential problems. How yum works can be slightly different then you invision, therefore security plays a role. Yum uses mirrors to download packages, other distros do the same, however from my experience it seems that RH based distros cause more problems than more "user-friendly" distros like Ubuntu. Whether Ubuntu mirros are from more trusted sites (determined by your firewall) that are less community based or just plainly verified or RH derivitives are more "open", I don't know (maybe someone can correct me someday). Regardless, you will have a lot of failed mirrors on RH based (especially CentOS from my dev phase). For example, something as common as git may be blocked because it uses a port number of 9418, which lets be honest, is probably blocked by your company firewall by default.

In the development environment, the static IP of xxx.xxx.xxx.50 was added as an exception on our smoothwall. In a production environment you servers static IP may be apart of an exception range to begin with, check with your firewall exception rules for content filtering.

Section 2.1 Registering Your System
===================================
       SYSTEM REGISTRATION
===================================
# This section only applies to RHEL and is mandatory if you want to basically be able to do anything.


===========================================
 Extra Packages for Enterprise Linux (EPEL)
===========================================
Prerequisite: None
Source: https://fedoraproject.org/wiki/EPEL#What_is_Extra_Packages_for_Enterprise_Linux_.28or_EPEL.29.3F

"Extra Packages for Enterprise Linux (or EPEL) is a Fedora Special Interest Group that creates, maintains, and manages a high quality set of additional packages for Enterprise Linux, including, but not limited to, Red Hat Enterprise Linux (RHEL), CentOS and Scientific Linux (SL), Oracle Linux (OL).

EPEL packages are usually based on their Fedora counterparts and will never conflict with or replace packages in the base Enterprise Linux distributions. EPEL uses much of the same infrastructure as Fedora, including buildsystem, bugzilla instance, updates manager, mirror manager and more."

I have never used EPEL before this project so I can't really vouch for a good explanation on what it is / how it is used. However, I can say that 

===================================
 Inline with Upstream Stable (IUS)
===================================
Prerequisite: EPEL

It is much easier to just link the page that explains what they are about.
https://ius.io/Philosophy/

Basically, RHEL derivitives focus on very stable systems, so core packages are not updated to newer versions too often. It is only in specific cases where PHP 7 is needed. And of course, this is the case with moodle. But not everyone installs a RHEL server to run moodle so why would they care to have PHP 7 packages by default \s. The only time a new version of PHP may come to RHEL is when a new major distribution is released, i.e. RHEL 8. (I could be wrong about this...it could be something more like RHEL 7.6 or something like that)

Section 3: Installing Packages
===================================
     CORE PACKAGE INSTALLATION
===================================
# We will need a few packages in order to get Moodle up and running.
# Moodle is, at its core, a web server that generates default template web pages, and a web interface that allows users to edit.
# Think of it as a website builder, like Weebly/Wix, just 100% different in terms of functionality and 110% more under your control.

#Let's start with the packages we will need.
3.1: ~~~~apache/httpd.service~~~~

# First, let's check to see if httpd.service is on your system
# Note: systemctl and service are used depending on your system. The best way to check is to do a quick man systemctl || man service
systemctl status httpd (can also run command: service httpd status)

# On a minimal install (or basically any install) of any distro, httpd is not installed.
# Let's install it with yum
yum install httpd

# Note: On debian based systems, you will install something along the lines of apache || apache2

# You will notice it installs a few dependencies, these are necessary for the service to run, press y to continue.

# Finally, let's check the status of httpd one more time.
systemctl status httpd 
(you should now see green text stating active)

# Next, we need to enable httpd on startup
systemctl enable httpd

3.2: ~~~~mariadb~~~~
# MariaDB is the database service that will be used to store all the moodle data. We will download this with yum below:
# Note: The mariadb databases for every site you have contain pretty much ALL data for your site. The webroot files are basically just skeleton pages that pull the data.
yum install mariadb-server

3.3: ~~~~php~~~~
# PHP is a very tricky package. And by very tricky, I mean not at all, just annoying. Moodle 3.0+ requires PHP 7.0 and higher. Not a problem, however, RHEL/CentOS default repositories hold PHP5.6 by default, with no default upgrade packages in any "official" repository. Basically these distros are LTS (Long Time Support), meaning PHP7 will not come by default until another distro major version (at least from my understanding, correct me if I'm wrong). This means you will have to look elsewhere. Luckily, there is the IUS repository that can be found here https://ius.io/GettingStarted/

# Note: To get a feel for the previous four packages, I recommend looking at http://www.rpmfind.net
# This will explain in detail what each package means, and its intended purposes.

# These are all the "core" packages you need to get moodle up and running. There are other packages that will be listed below that are also necessary / somewhat necessary for moodle to be maintained.

===================================
  SECONDARY PACKAGE INSTALLATION
===================================
# There are a few other packages that will help maintain moodle and they are the following (denoted by actual packagename)
vim                      :     (optional)
git                      :     (optional but recommended)
policycoreutils-python   :     (necessary)                                         \\      
                                                                               ___ \o\ 
# x.1: ~~~~vim~~~~                                                            /   |     (you jumping into spikes)
# Why install vim, well you probably shouldn't because the learning curve is /    |^^^
# But, in all seriousness, install vim if you use vim as your default editor. If you use something else then skip this part.
# The issue comes from vi being the default package for a possible editor on RH derivitives. Vi is about 800x more difficult than vim.
# Vim installs "over top" of vi and uses the same command as an alias, meaning you can still type vi. Basically, it just fixes the controls.
# If you don't dabble with linux often, I recommend using nano, which is basically installed on every system that has ever existed. It lists on the screen what the controls are to save and exit so your hand is held at every point along the way.
yum install vim

# x.2: ~~~~git~~~~
# Why do we need git? Well, you don't. Will it make your life easier? Yes. Since moodle is hosted on github as open source, you can easily git clone the latest stable / dev branch of moodle. Installing git is very simple and doesn't involve signing up for anything (unless you want to use git for your own repos).
yum install git

# To make this section short, we will briefly talk about the syntax of downloading from anothers git repository.
git clone https://github.com/moodle/moodle.git

# In this section, just know that it navigates to the site github.com, then navigates to the moodle profile (similar to your github user account), then it navigates to their repo named moodle which has a somewhat "hidden" extension of .git

# Note: This will pull whatever the latest branch is from moodle.git. You may not want this because they do have a development cycle for at least one minor version. As of writing this moodle 3.6 is the latest dev, while moodle 3.5 is the latest STABLE.

# x.3: ~~~~policycoreutils-python~~~~
# This package encompasses a lot of features. The main feature for a moodle install on (at least) CentOS 7 is SELinux. To go into even more detail it is for the semanage command for SELinux.
# An example of how this is used is the following:
semanage fcontext -a -t httpd_sys_rw_content_t /path/to/whatever

# A break down of the command:
semanage                      : interface with SELinux for the modification of booleans
fcontext                      : manage file context mapping definitions
-a                            : add
-f                            : distinguish file type
httpd_sys_rw_content_t        : allowing read/write for apache/www-data to modify
/path/to/whatever             : the location of where rw_content can read / write

# sources for above:
https://linux.die.net/man/8/semanage
https://www.serverlab.ca/tutorials/linux/web-servers-linux/configuring-selinux-policies-for-apache-web-servers/


Section 4: Configuring the PHP file to be specific towards your site
===================================
       PHP CONFIGURATION
===================================

[a] Pre-existing config.php file from previous site
# This condition is in the case of migrating or pulling a site out of dev and copying to a new production system.
# Let's start by backing up the config.php file; you will find this in your moodle web root location.
# A default web root may be located at /var/www/html/moodle; or /usr/moodle; etc.
# One way to find this is to use find (there may be a better way, but this works)
find /var/www -name "moodle"
or
find /usr/ -name "moodle"

# Navigate to that web root
cd /var/www/html/moodle

# Backup the config.php file
# Note: the .backup extension is completely arbitrary, it simply changes the name because extensions do not matter on Linux.
# Note: cp is used here because if you would use something like mv, your existing moodle site would break because it would not be able to locate config.php, as only config.php.backup would exist.
cp -pr config.php config.php.backup

# This should be all that needs to be done if a pre-existing site is in place. Modifications may have to be made later in the setup.

[b] Creating a brand new config.php file on a fresh installation of moodle
#There is a file in the default moodle directory, installed from their site, that contains a file called config-dist.php

4.1 Backing up the PHP Configuration File
# config-dist.php, in this case, is the default template for config.php
# Backup this file by using the cp command
cp config-dist.php config.php

# This file will tell your site what to use. For instance, say you have 12 Moodle sites, each would have their own config.php file.
# The file tells the site what database to use, where the data should be stored, and also where any site files should be stored.

# Open the configuration file
vi config.php

# When the file opens
Press i to enter insert mode

#Below is a list of the important variables to change, based on your environment.
$CFG->dbtype = "mariadb"    (<-- this must change whether you are using mysql, sqlsrv, pgsql, etc.)
$CFG->dbhost = "localhost"  (<-- this should only change if you have a db hosted somewhere)
$CFG->dbname = "mymoodle"   (<-- this should be the name of where you installed moodle files)
$CFG->dbuser = "moodleuser" (<-- this should be something more unique)
$CFG->dbpass = "moodlepass" (<-- this should be something unique)
$CFG->prefix = "mdl_" 

$CFG->wwwroot = "http://localhost/mymoodle" (<-- mymoodle will be whatever you named the path of your moodle files)

$CFG->dirroot = '/usr/moodle/mymoodle'       (<-- mymoodle will be the path name you chose above)
$CFG->dataroot = '/usr/moodle_data/mymoodle' (<-- path should lead to you moodle_data dir)

# Closing the Editor
Press Esc to leave insert mode
Hold Shift and ZZ to leave
- ZZ will have the same functionality as :wq!

[c] Using moodle web installer to setup config.php
# This situation can optionally be used to setup config.php.
# The workflow is as follows (labeled partially in sections):
-> Section 1: Network Configuration
-> Section 2: Update System
-> Section 3: Core Package Installation
-> Section 4: Secondary Package Installation
-> Section 5: Install Moodle core STABLE files
-> Section 6: Navigating to localhost/moodledir 
              (localhost as in moodle server local IP address (setup in Network Configuration)
              (moodledir as in where the moodle core files directory is located) 
                    OR
              192.168.0.100/moodle                : localhost example
              moodle.company.org/moodle           : domain/hostname example
              
-> Section 7: From here, follow the web installer. This will take you through everything you need to have an up-and-running moodle installation. It will create your web directory with appropriate permissions, create your DB with permissions needed, etc.


Section 5: Configuring MariaDB
===================================
       MARIADB CONFIGURATION
===================================
# MariaDB is not installed by default on CentOS 7 minimal install. We covered how to install this in Core Package Installation.
# After the installation we need to start the service manually.
systemctl start mariadb

# Let's check the status of mariadb to make sure it is running. (look for the green text stating active)
systemctl status mariadb

# Finally, enable mariadb on startup.
systemctl enable mariadb

5.1 Configuration of MariaDB
# Set up MariaDB by using the following command
mysql_secure_installation

# The options for mysql_secure_installation are the following:
# Note: Upon initial installation there is no root password set (I believe there may be a temporary password created, but that also might just be mysql that does that). This is the reason we just push enter on the first prompt.
|--- Enter current password for root (enter for none): Just press the Enter
|--- Set root password? [Y/n]: Y
|--- New password: Enter password
|--- Re-enter new password: Repeat password
|--- Remove anonymous users? [Y/n]: Y
|--- Disallow root login remotely? [Y/n]: Y
|--- Remove test database and access to it? [Y/n]:  Y
|--- Reload privilege tables now? [Y/n]:  Y

# I can't go into detail about why you should say yes to basically everything after the password, but to me they seem like a pretty good choice.
# Another important thing to mention is that mariadb is a fork of mysql, which is maintained by some of the OG developers of mysql. I'm pretty sure they try and keep up with the releases of mysql, which is why 98.2% of the commands are equivalent. So, don't be scared if you are using a command that literally has the name mysql in it...you're not using mysql.

# Restart MariaDB
systemctl restart mariadb

# Double check that it is active again
systemctl status mariadb

===================================
       Moodle DB Creation
===================================
# Creating a MariaDB database for Moodle
# We need to start by logging in to MariaDB
mysql -u root -p (This will ask you for the password you made in the mysql_secure_installation step above)

#Create the database
CREATE DATABASE mymoodle CHARSET 'utf8mb4';

# mymoodle signifies the name of your database. This is important because it determines where your moodle web files point to when looking for the data. If you are setting up moodle for, say, a school district, you should probably name it something like SchoolEC_Moodle. This will help you in the future...especially once you start managing 10+ moodle sites.

# Do not quote me, but I think utf8mb4 is what Moodle wants you to use. However, guides previous to 3.0 will tell you to use utf-8. What's the difference??? One word. Emoji.Support. Ok, fine, two words I guess.

# Grant access
GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,ALTER ON mymoodle.* TO moodleuser@localhost IDENTIFIED BY 'moodlepass';

# Here we are doing a few things, first:
GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,ALTER   : basically grant all privileges to a certain user
ON mymoodle.*                                               : grant those privilegs to the DB mymoodle, but also everything inside it
TO moodleuser@localhost                                     : more specifically, give it to moodleuser@localhost

*freeze* in the step above, moodleuser is created...I repeat, created. @localhost just specifies where this DB user is located. I'm pretty sure even in a production environment you would still use @localhost for the user as it just pertains to the local DB, which will probably only ever be local. *unfreeze*

IDENTIFIED BY 'moodlepass';                                 : and to verify that user can have access, give them a password to identify by.

*litte freeze* once again, this creates the password for the user that was created in the previous step *very gentle increase in temperature*

# Flush privileges
FLUSH PRIVILEGES;

# This step tells mariadb (mysql) to reload or refresh the grant tables.

# Exit MariaDB
exit (or quit)

Section : Configuring Cron Job
===================================
       CRON CONFIGURATION
===================================
#Edit the file at /etc/crontab

#Add the following lines to set up a cron job for each of your sites, for example:
*/5 * * * * root /usr/bin/wget -O /dev/null http://localhost/mymoodle/admin/cron.php

#For example, if you had 12 sites, you would have 12 cron tasks.

